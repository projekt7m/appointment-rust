/*
 * Appointments Backend
 *
 * # API for appointment scheduling related data  This is the API of the service at P7M that manages the scheduling and management of appointments. It is used by the booking widget (see the **WidgetApi** tag) with functions that are public and don't require the user to be authenticated.  For endpoints in other tags the caller has to be authenticated with the system and provide a JWT token in the Authorization header of the HTTP request. When using the API you typically get this token by authenticating first with OAuth 2.0.  When you are trying this API using the Swagger interface, you need to click the `Authorize` button and then again the Authorize button in the pop-up that gets opened.
 *
 * The version of the OpenAPI document: 0.12.1
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_booking_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBookingConfigError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_booking_schedule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBookingScheduleError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_booking_reserve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostBookingReserveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_booking_reserve_confirmation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostBookingReserveConfirmationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_booking_reserve_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutBookingReserveByIdError {
    UnknownValue(serde_json::Value),
}


/// Get the basic configuration information for the widget of the specified tenant  It is the entry point for the widget. The widget only needs to know in the page of which tenant it is used, then it sends out a request to this endpoint to know its basic configuration, services and workers it can offer to the user.
pub async fn get_booking_config(configuration: &configuration::Configuration, id: &str) -> Result<crate::models::TenantConfig, Error<GetBookingConfigError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/booking/config/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBookingConfigError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the available times at which a service can be booked.  After the user has selected a service and a worker, the Widget will use this endpoint to request the time slots it can provide to the user. Time slots are requested by date.
pub async fn get_booking_schedule(configuration: &configuration::Configuration, tid: &str, sid: &str, wid: &str, date: String) -> Result<crate::models::Availabilities, Error<GetBookingScheduleError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/booking/schedule/{tid}/{sid}/{wid}/{date}", local_var_configuration.base_path, tid=crate::apis::urlencode(tid), sid=crate::apis::urlencode(sid), wid=crate::apis::urlencode(wid), date=date);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBookingScheduleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Reserve a time slot for a user  After the user has selected a time slot, that it wants to use, the widget will use this endpoint to reserve the given time slot. The server will check, whether the slot is still available, send out the verification code to the user by SMS or phone call, and return to the caller whether the slot could be reserved.  For final booking of the time slot, the user has to give the widget the PIN it got sent, and the widget has to send the PIN with another request to the server, to finally book the reservation it made. Reservations, that do not get booked, will be canceled after a configured amount of time.  **Note:** This endpoint is especially purposed for the self-service of the user using the booking widget, therefore a reservation created here will be stored with a source type of `WEB`.
pub async fn post_booking_reserve(configuration: &configuration::Configuration, reservation_request: crate::models::ReservationRequest) -> Result<crate::models::ReservationResponse, Error<PostBookingReserveError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/booking/reserve", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&reservation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostBookingReserveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Confirm a reservation with the PIN sent to the user  After the user has entered the PIN he received in the Widget, the widget has to send the PIN to the server using this function. On the one hand this will confirm the reservation to the server, and on the other hand will tell the widget whether the entered PIN has been correct.
pub async fn post_booking_reserve_confirmation(configuration: &configuration::Configuration, rid: &str, confirmation_request: crate::models::ConfirmationRequest) -> Result<crate::models::ConfirmationResponse, Error<PostBookingReserveConfirmationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/booking/reserve/{rid}/confirmation", local_var_configuration.base_path, rid=crate::apis::urlencode(rid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&confirmation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostBookingReserveConfirmationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Resend the code for an existing reservation  TODO: Use this endpoint also to allow updating a revervation
pub async fn put_booking_reserve_by_id(configuration: &configuration::Configuration, rid: &str, reservation_request: crate::models::ReservationRequest) -> Result<crate::models::ReservationResponse, Error<PutBookingReserveByIdError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/booking/reserve/{rid}", local_var_configuration.base_path, rid=crate::apis::urlencode(rid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&reservation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutBookingReserveByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

